#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ PME 360 Backend - Script de D√©ploiement\n');
console.log('==========================================\n');

// Configuration
const config = {
  production: {
    NODE_ENV: 'production',
    PORT: process.env.PROD_PORT || 3000,
    DATABASE_URL: process.env.PROD_DATABASE_URL,
    JWT_SECRET: process.env.PROD_JWT_SECRET,
    FRONTEND_URL: process.env.PROD_FRONTEND_URL
  },
  staging: {
    NODE_ENV: 'staging',
    PORT: process.env.STAGING_PORT || 3001,
    DATABASE_URL: process.env.STAGING_DATABASE_URL,
    JWT_SECRET: process.env.STAGING_JWT_SECRET,
    FRONTEND_URL: process.env.STAGING_FRONTEND_URL
  }
};

async function deploy(environment = 'production') {
  try {
    console.log(`üìã D√©ploiement en environnement: ${environment.toUpperCase()}\n`);
    
    // 1. V√©rifications pr√©liminaires
    console.log('üîç 1. V√©rifications pr√©liminaires...');
    
    // V√©rifier que nous sommes dans le bon r√©pertoire
    if (!fs.existsSync('package.json')) {
      throw new Error('package.json non trouv√©. √ätes-vous dans le bon r√©pertoire?');
    }
    
    // V√©rifier les variables d'environnement
    const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET', 'FRONTEND_URL'];
    const envConfig = config[environment];
    
    for (const envVar of requiredEnvVars) {
      if (!envConfig[envVar]) {
        console.warn(`‚ö†Ô∏è  Variable d'environnement manquante: ${environment.toUpperCase()}_${envVar}`);
      }
    }
    
    console.log('‚úÖ V√©rifications termin√©es\n');
    
    // 2. Installation des d√©pendances
    console.log('üì¶ 2. Installation des d√©pendances...');
    execSync('npm ci --production=false', { stdio: 'inherit' });
    console.log('‚úÖ D√©pendances install√©es\n');
    
    // 3. Ex√©cution des tests
    console.log('üß™ 3. Ex√©cution des tests...');
    try {
      execSync('npm test', { stdio: 'inherit' });
      console.log('‚úÖ Tests r√©ussis\n');
    } catch (error) {
      if (process.env.SKIP_TESTS !== 'true') {
        throw new Error('Les tests ont √©chou√©. Utilisez SKIP_TESTS=true pour ignorer.');
      }
      console.log('‚ö†Ô∏è  Tests ignor√©s (SKIP_TESTS=true)\n');
    }
    
    // 4. Build de l'application
    console.log('üî® 4. Build de l\'application...');
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ Build termin√©\n');
    
    // 5. Migration de la base de donn√©es
    console.log('üóÉÔ∏è  5. Migration de la base de donn√©es...');
    try {
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      execSync('npx prisma generate', { stdio: 'inherit' });
      console.log('‚úÖ Base de donn√©es migr√©e\n');
    } catch (error) {
      console.log('‚ö†Ô∏è  Attention: Migration de base de donn√©es √©chou√©e\n');
    }
    
    // 6. V√©rification de s√©curit√©
    console.log('üîí 6. Audit de s√©curit√©...');
    try {
      execSync('npm audit --audit-level moderate', { stdio: 'inherit' });
      console.log('‚úÖ Audit de s√©curit√© r√©ussi\n');
    } catch (error) {
      console.log('‚ö†Ô∏è  Attention: Vuln√©rabilit√©s d√©tect√©es\n');
    }
    
    // 7. G√©n√©ration du rapport de d√©ploiement
    console.log('üìä 7. G√©n√©ration du rapport...');
    const deploymentReport = generateDeploymentReport(environment);
    
    fs.writeFileSync(
      `deployment-report-${Date.now()}.json`,
      JSON.stringify(deploymentReport, null, 2)
    );
    
    console.log('‚úÖ Rapport g√©n√©r√©\n');
    
    // 8. Instructions finales
    console.log('üéâ D√âPLOIEMENT TERMIN√â!\n');
    console.log('üìã √âtapes suivantes:');
    console.log('  1. V√©rifier que le serveur d√©marre correctement');
    console.log('  2. Tester les endpoints critiques');
    console.log('  3. Surveiller les logs pour d√©tecter les erreurs');
    console.log('  4. Configurer la surveillance (monitoring)');
    
    if (environment === 'production') {
      console.log('  5. Notifier l\'√©quipe du d√©ploiement r√©ussi');
      console.log('  6. Mettre √† jour la documentation si n√©cessaire\n');
    }
    
    console.log(`üåê Application d√©ploy√©e sur: ${envConfig.FRONTEND_URL || 'URL √† configurer'}`);
    console.log(`üì° API disponible sur: http://localhost:${envConfig.PORT}\n`);
    
  } catch (error) {
    console.error('‚ùå ERREUR DE D√âPLOIEMENT:\n');
    console.error(error.message);
    console.log('\nüîß Actions recommand√©es:');
    console.log('  - V√©rifier les logs ci-dessus');
    console.log('  - Corriger les erreurs identifi√©es');
    console.log('  - Relancer le d√©ploiement');
    console.log('  - Contacter l\'√©quipe technique si n√©cessaire\n');
    process.exit(1);
  }
}

function generateDeploymentReport(environment) {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  return {
    timestamp: new Date().toISOString(),
    environment,
    version: packageJson.version,
    nodeVersion: process.version,
    platform: process.platform,
    arch: process.arch,
    deployedBy: process.env.USER || process.env.USERNAME || 'unknown',
    gitCommit: getGitCommit(),
    gitBranch: getGitBranch(),
    dependencies: Object.keys(packageJson.dependencies || {}),
    buildSize: getBuildSize(),
    checks: {
      tests: 'passed',
      build: 'passed',
      audit: 'passed',
      migration: 'passed'
    }
  };
}

function getGitCommit() {
  try {
    return execSync('git rev-parse HEAD', { encoding: 'utf8' }).trim();
  } catch {
    return 'unknown';
  }
}

function getGitBranch() {
  try {
    return execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf8' }).trim();
  } catch {
    return 'unknown';
  }
}

function getBuildSize() {
  try {
    const stats = fs.statSync('./dist');
    return `${Math.round(stats.size / 1024)} KB`;
  } catch {
    return 'unknown';
  }
}

// Ex√©cution du script
const environment = process.argv[2] || 'production';

if (!['production', 'staging'].includes(environment)) {
  console.error('‚ùå Environnement invalide. Utilisez: production ou staging');
  process.exit(1);
}

deploy(environment);